{"version":3,"file":"static/js/649.bf7e4558.chunk.js","mappings":"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","sources":["assets/images/check.svg","components/sequences/Exercices/E.jsx"],"sourcesContent":["var _defs, _g, _text, _text2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCheck(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    xmlSpace: \"preserve\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\"\n    },\n    viewBox: \"0 0 763 752.5\",\n    x: \"0px\",\n    y: \"0px\",\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\r\\n   \\r\\n    .fil0 {fill:white}\\r\\n   \\r\\n  \"))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"fil0\",\n    d: \"M65 370c55,41 125,102 166,159 222,-268 232,-311 483,-529l49 0c-218,185 -361,389 -482,586l-80 16c-9,-50 -160,-201 -201,-232l65 0z\"\n  }))), _text || (_text = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 617,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"Created by Andy Mc\")), _text2 || (_text2 = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 622,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"from the Noun Project\")));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCheck);\nexport default __webpack_public_path__ + \"static/media/check.ecf149c7bad9021580587be9fbf1b5aa.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { getElementRandom } from \"../../../hooks/useRandom\";\r\nimport speak from \"../../../hooks/useSpeak\";\r\nimport checkIcon from '../../../assets/images/check.svg'\r\n\r\nconst E = (props) => {\r\n    const { data, onAttemptMade, score, imgNotFound } = props;\r\n    const [item, setItem] = useState(); //Valeur de l'item courant\r\n    const [input, setInput] = useState(\"\");//valeur de l'input\r\n    const [attemptCount, setAttemptCount] = useState(0);  //Nombre de tâches\r\n    const [tabResponses, setTabResponses] = useState(new Array(data?.choiceDetails.length).fill(null));\r\n    const [answerAlreadyTaken, setAnswerAlreadyTaken] = useState([]);\r\n    const inputRef = useRef(null); // Référence à l'élément d'entrée\r\n\r\n    useEffect(() => {\r\n        if (item){\r\n            speak(item.value);\r\n        }\r\n       \r\n    }, [item])\r\n\r\n    useEffect(() => {\r\n\r\n      \r\n        const init = () => {\r\n            if (attemptCount === tabResponses.length) {\r\n                const scorePercent = tabResponses.filter(el => el === true).length / tabResponses.length * 100; //Calule le score final basé sur le nombre de true\r\n                score(scorePercent);\r\n                onAttemptMade(); \r\n            }else if(attemptCount  < tabResponses.length) {\r\n                setItem(getElementRandom(data?.choiceDetails.filter(el => {\r\n                    return answerAlreadyTaken.map(it => it.value)\r\n                                             .includes(el.value) === false;\r\n                })));\r\n              \r\n                if (item){\r\n                    const tabAnswerAlreadyTaken = answerAlreadyTaken;\r\n              \r\n                    tabAnswerAlreadyTaken.push(item);\r\n               \r\n                    setAnswerAlreadyTaken(tabAnswerAlreadyTaken)\r\n                }\r\n            }\r\n        }\r\n       \r\n        init();\r\n      \r\n    }, [attemptCount, onAttemptMade, tabResponses.length]);\r\n\r\n    const handleChange = (evt) => {\r\n        const inputText = evt.target.value;\r\n\r\n        if (item.chosenSyllable){\r\n            if (inputText.length < input.length) {\r\n                setInput(input.replace(/[^_]/g, '_')); // Remplace tous les caractères non-trait par des traits\r\n                return;\r\n            }\r\n            \r\n            // Obtient le dernier caractère saisi\r\n            const lastChar = inputText.slice(-1);\r\n        \r\n            // Trouve le premier trait de soulignement dans l'entrée actuelle\r\n            const firstUnderscoreIndex = input.indexOf('_');\r\n        \r\n            if (firstUnderscoreIndex !== -1) {\r\n                // Construit la nouvelle chaîne avec le trait remplacé par le dernier caractère saisi\r\n                let updatedInput = input.substring(0, firstUnderscoreIndex) + lastChar + \r\n                                   input.substring(firstUnderscoreIndex + 1);\r\n        \r\n                \r\n                if (!updatedInput.includes('_')) {\r\n                    \r\n                }\r\n        \r\n                setInput(updatedInput);\r\n            }\r\n        }else{\r\n             setInput(evt.target.value)\r\n        }\r\n     \r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        if (item && item.chosenSyllable){\r\n            speak(item.value);\r\n            if (data.exo_type === \"E2 bis\" && item.chosenSyllable) {\r\n                    setInput(\r\n                        item?.value.replace(new RegExp(`[^${item?.chosenSyllable}]`, \"gi\"), \"_\")\r\n                    )\r\n            }\r\n        }\r\n\r\n    }, [item, data.exo_type]);\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        \r\n    \r\n        const finalInput = input.endsWith('_') ? input.slice(0, -1) : input;\r\n        const isCorrect = finalInput.trim().toUpperCase() === item.value.toUpperCase();\r\n        \r\n        const newTabResponses = [...tabResponses];\r\n        newTabResponses[attemptCount] = isCorrect;\r\n        setTabResponses(newTabResponses);\r\n        setAttemptCount(attemptCount + 1);\r\n    \r\n        setInput(\"\"); // Réinitialise l'input après avoir entré sa réponse\r\n    };\r\n    \r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Backspace') {\r\n            const lastUnderscoreIndex = input.lastIndexOf('_'); \r\n            if (lastUnderscoreIndex !== -1) { // Vérifie si une occurrence a été trouvée\r\n                const newInput = input.substring(0, lastUnderscoreIndex) + '_' + input.substring(lastUnderscoreIndex + 1); // Supprime la dernière occurrence du caractère \"_\"\r\n                setInput(newInput); // Met à jour l'input avec la nouvelle chaîne\r\n            }\r\n        }\r\n    };\r\n\r\n    return <React.Fragment>\r\n                <h2 className=\"exercice__consigne\">{data?.exo_instruction}</h2>\r\n                <div className=\"group\">\r\n                {data.exo_type !== \"E1\" && \r\n                <img src={'https://mtsene.lpmiaw.univ-lr.fr/lettrelumiere/public/images/choices/' + item?.file } \r\n                                             alt=\"\" \r\n                                             className=\"exercice__img\"  \r\n                                        \r\n                                             onClick={() => speak(item.value)}\r\n                                             \r\n                                             onError={(e) => {\r\n                                                e.target.src = imgNotFound;\r\n                                              }}/>}\r\n                    <p className=\"exercice__sound\" \r\n                       onClick={() => speak(item.value)}>\r\n                        ?\r\n                    </p>\r\n                </div>\r\n                \r\n                <form onSubmit={handleSubmit} className=\"exercice__form\">\r\n                    <input type=\"text\" \r\n                           value={input}\r\n                           className=\"exercice__input\" \r\n                           onKeyDown={(event) => handleKeyDown(event)}\r\n                        //    value={ data.exo_type=== \"E2 Bis\" && input.replace(new RegExp(`[^${item?.chosenSyllable}]`, \"gi\"), \"-\")}\r\n                           onChange={(evt) => handleChange(evt)} \r\n                           autoFocus />\r\n                </form>\r\n                <div className=\"exercice__footer\">\r\n                    <ul className=\"progress\">\r\n                        {tabResponses.map((response, index) => (\r\n                            <li key={index} className={`${response === null ? 'progress__part' : response === true ? 'progress__part progress__part--true' : 'progress__part progress__part--false'}`}></li>\r\n                        ))}\r\n                    </ul>\r\n                    <button type=\"submit\" className=\"exercice__valid\" onClick={handleSubmit}>Ok <img src={checkIcon} alt=\"ok\" /></button>\r\n                </div>\r\n            </React.Fragment>\r\n}\r\n\r\nexport default E;\r\n"],"names":["props","data","onAttemptMade","score","imgNotFound","item","setItem","useState","input","setInput","attemptCount","setAttemptCount","tabResponses","setTabResponses","Array","choiceDetails","length","fill","answerAlreadyTaken","setAnswerAlreadyTaken","useRef","useEffect","speak","value","init","scorePercent","filter","el","getElementRandom","map","it","includes","tabAnswerAlreadyTaken","push","chosenSyllable","exo_type","replace","RegExp","concat","handleSubmit","event","preventDefault","isCorrect","endsWith","slice","trim","toUpperCase","newTabResponses","_jsxs","React","children","_jsx","className","exo_instruction","src","file","alt","onClick","onError","e","target","onSubmit","type","onKeyDown","key","lastUnderscoreIndex","lastIndexOf","newInput","substring","handleKeyDown","onChange","evt","inputText","lastChar","firstUnderscoreIndex","indexOf","updatedInput","handleChange","autoFocus","response","index","checkIcon"],"sourceRoot":""}