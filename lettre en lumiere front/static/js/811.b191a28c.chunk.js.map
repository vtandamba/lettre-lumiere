{"version":3,"file":"static/js/811.b191a28c.chunk.js","mappings":"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","sources":["assets/images/check.svg","components/sequences/Exercices/C.jsx"],"sourcesContent":["var _defs, _g, _text, _text2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCheck(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    xmlSpace: \"preserve\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\"\n    },\n    viewBox: \"0 0 763 752.5\",\n    x: \"0px\",\n    y: \"0px\",\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\r\\n   \\r\\n    .fil0 {fill:white}\\r\\n   \\r\\n  \"))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"fil0\",\n    d: \"M65 370c55,41 125,102 166,159 222,-268 232,-311 483,-529l49 0c-218,185 -361,389 -482,586l-80 16c-9,-50 -160,-201 -201,-232l65 0z\"\n  }))), _text || (_text = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 617,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"Created by Andy Mc\")), _text2 || (_text2 = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 622,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"from the Noun Project\")));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCheck);\nexport default __webpack_public_path__ + \"static/media/check.ecf149c7bad9021580587be9fbf1b5aa.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from \"react\";\r\nimport speak from \"../../../hooks/useSpeak\";\r\nimport checkIcon from '../../../assets/images/check.svg'\r\n\r\n\r\n\r\nconst C = (props) => {\r\n    const { data, onAttemptMade, score, imgNotFound} = props;\r\n    const [syllabes, setSyllabes] = useState( data?.choiceDetails);\r\n    const [currentSyllabeIndex, setCurrentSyllabeIndex] = useState(0);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [showSyllabe, setShowSyllabe] = useState(true);\r\n    const [tabResponses, setTabResponses] = useState(new Array(syllabes.length).fill(null));\r\n    const [attemptCount, setAttemptCount] = useState(0);\r\n    const [answerAlreadyTaken, setAnswerAlreadyTaken] = useState([]);\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n         if (attemptCount === tabResponses.length && attemptCount !== 0) {\r\n            onAttemptMade(); // Passe à l'exercice suivant immédiatement\r\n            const scorePercent = tabResponses.filter(el => el === true).length / tabResponses.length * 100; //Calule le score final basé sur le nombre de true\r\n       \r\n            score(scorePercent);\r\n        }\r\n        else {\r\n            setShowSyllabe(true);\r\n            const timer = setTimeout(() => {\r\n                if (syllabes) {\r\n                    setShowSyllabe(false);\r\n                    speak(syllabes[currentSyllabeIndex].value);\r\n                }\r\n            }, 3000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [attemptCount, syllabes, currentSyllabeIndex,  tabResponses]);\r\n\r\n    const handleInputChange = (event) => {\r\n        setUserInput(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const isCorrect = userInput.trim().toLowerCase() === syllabes[currentSyllabeIndex]?.value.toLowerCase();\r\n        const newTabResponses = tabResponses.map((res, index) => \r\n            index === attemptCount ? isCorrect : res\r\n        );\r\n\r\n        setTabResponses(newTabResponses);\r\n        setAttemptCount(prevAttemptCount => prevAttemptCount + 1);\r\n\r\n\r\n        setUserInput(\"\");\r\n        if (currentSyllabeIndex + 1 < syllabes.length) {\r\n            setCurrentSyllabeIndex(prevIndex => prevIndex + 1);\r\n        } else {\r\n           \r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2 className=\"exercice__consigne\">{data.exo_instruction}</h2>\r\n            <div>\r\n                \r\n                    {showSyllabe ? <div>\r\n                                        {  data.exo_type !== \"C1\" && <img src={`https://mtsene.lpmiaw.univ-lr.fr/lettrelumiere/public/images/choices/${syllabes[currentSyllabeIndex].file}`} \r\n                                                                      alt={syllabes[currentSyllabeIndex].value}\r\n                                                                      className=\"exercice__img\"\r\n                                                                      style={{marginBottom:'1rem'}}\r\n                                                                      onError={(e) => {\r\n                                                                        e.target.src = imgNotFound;\r\n                                                                      }}/>}\r\n                                      \r\n                                        <p className=\"list__item\">{syllabes[currentSyllabeIndex].value}</p>\r\n                                    </div> \r\n                                 : <form onSubmit={handleSubmit} className=\"exercice__form\">\r\n                                    <input type=\"text\" value={userInput} onChange={handleInputChange} autoFocus className=\"exercice__input\"/>\r\n                                  </form>\r\n                    }\r\n                \r\n            </div>\r\n\r\n            <div className=\"exercice__footer\">\r\n                <ul className=\"progress\">\r\n                    {tabResponses.map((response, index) => (\r\n                        <li key={index} className={`${response === null ? 'progress__part' \r\n                                                            : response === true \r\n                                                            ? 'progress__part progress__part--true' \r\n                                                            : 'progress__part progress__part--false'}`}></li>\r\n                    ))}\r\n                </ul>\r\n                <button className=\"exercice__valid\" onClick={handleSubmit}>Ok <img src={checkIcon} alt=\"ok\" /></button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default C;\r\n"],"names":["props","data","onAttemptMade","score","imgNotFound","syllabes","setSyllabes","useState","choiceDetails","currentSyllabeIndex","setCurrentSyllabeIndex","userInput","setUserInput","showSyllabe","setShowSyllabe","tabResponses","setTabResponses","Array","length","fill","attemptCount","setAttemptCount","answerAlreadyTaken","setAnswerAlreadyTaken","useEffect","timer","setTimeout","speak","value","clearTimeout","scorePercent","filter","el","handleSubmit","event","_syllabes$currentSyll","preventDefault","isCorrect","trim","toLowerCase","newTabResponses","map","res","index","prevAttemptCount","prevIndex","_jsxs","React","children","_jsx","className","exo_instruction","exo_type","src","concat","file","alt","style","marginBottom","onError","e","target","onSubmit","type","onChange","autoFocus","response","onClick","checkIcon"],"sourceRoot":""}