{"version":3,"file":"static/js/649.643f8ac9.chunk.js","mappings":"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","sources":["assets/images/check.svg","components/sequences/Exercices/E.jsx"],"sourcesContent":["var _defs, _g, _text, _text2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCheck(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    xmlSpace: \"preserve\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\"\n    },\n    viewBox: \"0 0 763 752.5\",\n    x: \"0px\",\n    y: \"0px\",\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\r\\n   \\r\\n    .fil0 {fill:white}\\r\\n   \\r\\n  \"))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"fil0\",\n    d: \"M65 370c55,41 125,102 166,159 222,-268 232,-311 483,-529l49 0c-218,185 -361,389 -482,586l-80 16c-9,-50 -160,-201 -201,-232l65 0z\"\n  }))), _text || (_text = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 617,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"Created by Andy Mc\")), _text2 || (_text2 = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 622,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"from the Noun Project\")));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCheck);\nexport default __webpack_public_path__ + \"static/media/check.ecf149c7bad9021580587be9fbf1b5aa.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { getElementRandom } from \"../../../hooks/useRandom\";\r\nimport speak from \"../../../hooks/useSpeak\";\r\nimport checkIcon from '../../../assets/images/check.svg'\r\nimport speaker from '../../../assets/images/haut-parleur.svg'\r\n\r\nconst E = (props) => {\r\n    const { data, onAttemptMade, score, imgNotFound } = props;\r\n    const [item, setItem] = useState(); //Valeur de l'item courant\r\n    const [input, setInput] = useState(\"\");//valeur de l'input\r\n    const [attemptCount, setAttemptCount] = useState(0);  //Nombre de tâches\r\n    const [tabResponses, setTabResponses] = useState(new Array(data?.choice.length).fill(null));\r\n    const [answerAlreadyTaken, setAnswerAlreadyTaken] = useState([]);\r\n\r\n   \r\n    useEffect(() => {\r\n        if (item){\r\n            speak(item.value);\r\n            console.log(item);\r\n        }\r\n       \r\n    }, [item])\r\n\r\n    useEffect(() => {\r\n\r\n      \r\n        const init = () => {\r\n            if (attemptCount === tabResponses.length) {\r\n                const scorePercent = tabResponses.filter(el => el === true).length / tabResponses.length * 100; //Calule le score final basé sur le nombre de true\r\n                score(scorePercent);\r\n                onAttemptMade(); \r\n            }else if(attemptCount  < tabResponses.length) {\r\n                setItem(getElementRandom(data?.choice.filter(el => {\r\n                    return answerAlreadyTaken.map(it => it.value)\r\n                                             .includes(el.value) === false;\r\n                })));\r\n              \r\n                if (item){\r\n                    const tabAnswerAlreadyTaken = answerAlreadyTaken;\r\n                    tabAnswerAlreadyTaken.push(item);\r\n                    setAnswerAlreadyTaken(tabAnswerAlreadyTaken)\r\n                }\r\n            }\r\n        }\r\n       \r\n        init();\r\n        \r\n    }, [attemptCount, onAttemptMade, tabResponses.length]);\r\n\r\n\r\n\r\n    const handleChange = (evt) => {\r\n        const inputText = evt.target.value;\r\n\r\n    \r\n        if (inputText.length < input.length) {\r\n            setInput(input.replace(/[^_]/g, '_')); \r\n            return;\r\n        }\r\n        \r\n        const lastChar = inputText.slice(-1);\r\n        const firstUnderscoreIndex = input.indexOf('_');\r\n    \r\n        if (firstUnderscoreIndex !== -1) {\r\n            let updatedInput = input.substring(0, firstUnderscoreIndex) + lastChar + \r\n                                input.substring(firstUnderscoreIndex + 1);\r\n    \r\n    \r\n            setInput(updatedInput);\r\n        }\r\n\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        let initialInput  = \"\";\r\n        if (item && item.chosenSyllable) {\r\n            // Initialisation de l'input avec des _\r\n            initialInput = item.value.split('').map(char => \r\n                item.chosenSyllable.includes(char) ? '_' : char\r\n            ).join('');\r\n        \r\n        } else {\r\n            initialInput = item?.value.replace(/./g, '_');\r\n        }\r\n        setInput(initialInput);\r\n        speak(item?.value);\r\n    }, [item]);\r\n    \r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n    \r\n        const finalInput = input.endsWith('_') ? input.slice(0, -1) : input;\r\n        const isCorrect = finalInput.trim().toUpperCase() === item?.value.toUpperCase();\r\n        \r\n        const newTabResponses = [...tabResponses];\r\n        newTabResponses[attemptCount] = isCorrect;\r\n        setTabResponses(newTabResponses);\r\n        setAttemptCount(attemptCount + 1);\r\n    \r\n        setInput(\"\"); // Réinitialise l'input après avoir entré sa réponse\r\n    };\r\n    \r\n\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Backspace') {\r\n            event.preventDefault(); \r\n    \r\n            // Trouve l'index à partir duquel commencer à effacer (le dernier caractère non '_' ou le début)\r\n            let indexToErase = input.split('').lastIndexOf('_') - 1;\r\n            indexToErase = indexToErase >= 0 ? indexToErase : input.length - 1;\r\n            const newInput = input.split('').map((char, index) => {\r\n                if (index === indexToErase) {\r\n                    return '_'; \r\n                }\r\n                return char; \r\n            }).join('');\r\n    \r\n            setInput(newInput);\r\n        }\r\n    };\r\n    \r\n\r\n    return <React.Fragment>\r\n                 <div  className=\"exercice__consigne\">\r\n                    <img src={speaker} alt=\"\" />\r\n                    <h1>{data?.exo_instruction}</h1>\r\n                </div>\r\n                <div className=\"group\">\r\n                {data.exo_type !== \"E1\" && \r\n                <img src={'https://mtsene.lpmiaw.univ-lr.fr/lettrelumiere/public/images/choices/' + item?.file } \r\n                                             alt=\"\" \r\n                                             className=\"exercice__img\"  \r\n                                        \r\n                                             onClick={() => speak(item?.value)}\r\n                                             \r\n                                             onError={(e) => {\r\n                                                e.target.src = imgNotFound;\r\n                                              }}/>}\r\n                    <p className=\"exercice__sound\" \r\n                       onClick={() => speak(item.value)}>\r\n                        ?\r\n                    </p>\r\n                </div>\r\n                \r\n                <form onSubmit={handleSubmit} className=\"exercice__form\">\r\n                    <input type=\"text\" \r\n                           value={input}\r\n                           className=\"exercice__input\" \r\n                           onKeyDown={(event) => handleKeyDown(event)}\r\n                      \r\n                           onChange={(evt) => handleChange(evt)} \r\n                           autoFocus />\r\n                </form>\r\n                <div className=\"exercice__footer\">\r\n                    <ul className=\"progress\">\r\n                        {tabResponses.map((response, index) => (\r\n                            <li key={index} className={`${response === null ? 'progress__part' : response === true ? 'progress__part progress__part--true' : 'progress__part progress__part--false'}`}></li>\r\n                        ))}\r\n                    </ul>\r\n                    <button type=\"submit\" className=\"exercice__valid\" onClick={handleSubmit}>Ok <img src={checkIcon} alt=\"ok\" /></button>\r\n                </div>\r\n            </React.Fragment>\r\n}\r\n\r\nexport default E;\r\n"],"names":["props","data","onAttemptMade","score","imgNotFound","item","setItem","useState","input","setInput","attemptCount","setAttemptCount","tabResponses","setTabResponses","Array","choice","length","fill","answerAlreadyTaken","setAnswerAlreadyTaken","useEffect","speak","value","console","log","init","scorePercent","filter","el","getElementRandom","map","it","includes","tabAnswerAlreadyTaken","push","initialInput","chosenSyllable","split","char","join","replace","handleSubmit","event","preventDefault","isCorrect","endsWith","slice","trim","toUpperCase","newTabResponses","_jsxs","React","children","className","_jsx","src","speaker","alt","exo_instruction","exo_type","file","onClick","onError","e","target","onSubmit","type","onKeyDown","key","indexToErase","lastIndexOf","newInput","index","handleKeyDown","onChange","evt","inputText","lastChar","firstUnderscoreIndex","indexOf","updatedInput","substring","handleChange","autoFocus","response","concat","checkIcon"],"sourceRoot":""}