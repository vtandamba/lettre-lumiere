{"version":3,"file":"static/js/811.f1676c35.chunk.js","mappings":"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","sources":["assets/images/check.svg","components/sequences/Exercices/C.jsx"],"sourcesContent":["var _defs, _g, _text, _text2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCheck(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    xmlSpace: \"preserve\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\"\n    },\n    viewBox: \"0 0 763 752.5\",\n    x: \"0px\",\n    y: \"0px\",\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\r\\n   \\r\\n    .fil0 {fill:white}\\r\\n   \\r\\n  \"))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"fil0\",\n    d: \"M65 370c55,41 125,102 166,159 222,-268 232,-311 483,-529l49 0c-218,185 -361,389 -482,586l-80 16c-9,-50 -160,-201 -201,-232l65 0z\"\n  }))), _text || (_text = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 617,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"Created by Andy Mc\")), _text2 || (_text2 = /*#__PURE__*/React.createElement(\"text\", {\n    x: 0,\n    y: 622,\n    fill: \"#000000\",\n    fontSize: \"5px\",\n    fontWeight: \"bold\",\n    fontFamily: \"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\"\n  }, \"from the Noun Project\")));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCheck);\nexport default __webpack_public_path__ + \"static/media/check.ecf149c7bad9021580587be9fbf1b5aa.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from \"react\";\r\nimport speak from \"../../../hooks/useSpeak\";\r\nimport checkIcon from '../../../assets/images/check.svg'\r\nimport speaker from '../../../assets/images/haut-parleur.svg'\r\n\r\n\r\nconst C = (props) => {\r\n    const { data, onAttemptMade, score, imgNotFound} = props;\r\n    const [syllabes, setSyllabes] = useState( data?.choice);\r\n    const [currentSyllabeIndex, setCurrentSyllabeIndex] = useState(0);\r\n    const [input, setInput] = useState(\"\");\r\n    const [showSyllabe, setShowSyllabe] = useState(true);\r\n    const [tabResponses, setTabResponses] = useState(new Array(syllabes.length).fill(null));\r\n    const [attemptCount, setAttemptCount] = useState(0);\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n         if (attemptCount === tabResponses.length && attemptCount !== 0) {\r\n            onAttemptMade(); // Passe à l'exercice suivant immédiatement\r\n            const scorePercent = tabResponses.filter(el => el === true).length / tabResponses.length * 100; //Calule le score final basé sur le nombre de true\r\n       \r\n            score(scorePercent);\r\n        }\r\n        else {\r\n            setShowSyllabe(true);\r\n            const timer = setTimeout(() => {\r\n                if (syllabes) {\r\n                    setShowSyllabe(false);\r\n                    speak(syllabes[currentSyllabeIndex].value);\r\n                }\r\n            }, 3000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [attemptCount, syllabes, currentSyllabeIndex,  tabResponses]);\r\n\r\n\r\n    // Initialise l'input en mettant des _ ou il faut\r\n    useEffect(() => {\r\n        let initialInput = \"\";\r\n        const currentSyllabe = syllabes[currentSyllabeIndex];\r\n        if (currentSyllabe?.chosenSyllable) {\r\n            initialInput = currentSyllabe.value.split('').map(char => \r\n                currentSyllabe.chosenSyllable.includes(char) ? '_' : char\r\n            ).join('');\r\n        } else {\r\n            initialInput = currentSyllabe.value.replace(/./g, '_');\r\n        }\r\n        \r\n        setInput(initialInput);\r\n        speak(currentSyllabe.value);\r\n    }, [syllabes, currentSyllabeIndex]); \r\n\r\n    \r\n\r\n    const handleInputChange = (evt) => {\r\n        const inputText = evt.target.value;\r\n\r\n     \r\n            \r\n            if (inputText.length < input.length) {\r\n                setInput(input.replace(/[^_]/g, '_')); \r\n                return;\r\n            }\r\n            \r\n            const lastChar = inputText.slice(-1);\r\n            const firstUnderscoreIndex = input.indexOf('_');\r\n        \r\n            if (firstUnderscoreIndex !== -1) {\r\n                let updatedInput = input.substring(0, firstUnderscoreIndex) + lastChar + \r\n                                   input.substring(firstUnderscoreIndex + 1);\r\n        \r\n        \r\n                setInput(updatedInput);\r\n            }\r\n    };\r\n    \r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n    \r\n        const finalInput = input.endsWith('_') ? input.slice(0, -1) : input;\r\n        const isCorrect = finalInput.trim().toUpperCase() === syllabes[currentSyllabeIndex]?.value.toUpperCase();\r\n        \r\n        const newTabResponses = [...tabResponses];\r\n        newTabResponses[attemptCount] = isCorrect;\r\n        setTabResponses(newTabResponses);\r\n        setAttemptCount(attemptCount + 1);\r\n    \r\n        setInput(\"\"); // Réinitialise l'input après avoir entré sa réponse\r\n        if (currentSyllabeIndex + 1 < syllabes.length) {\r\n            setCurrentSyllabeIndex(prevIndex => prevIndex + 1);\r\n        }\r\n    };\r\n\r\n\r\n    \r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Backspace') {\r\n            event.preventDefault(); \r\n    \r\n            // Trouve l'index à partir duquel commencer à effacer (le dernier caractère non '_' ou le début)\r\n            let indexToErase = input.split('').lastIndexOf('_') - 1;\r\n            indexToErase = indexToErase >= 0 ? indexToErase : input.length - 1;\r\n            const newInput = input.split('').map((char, index) => {\r\n                if (index === indexToErase) {\r\n                    return '_'; \r\n                }\r\n                return char; \r\n            }).join('');\r\n    \r\n            setInput(newInput);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <React.Fragment>\r\n             <div  className=\"exercice__consigne\">\r\n                    <img src={speaker} alt=\"\" />\r\n                    <h1>{data?.exo_instruction}</h1>\r\n            </div>\r\n            <div>\r\n                \r\n                    {showSyllabe ? <div>\r\n                                        {  data.exo_type !== \"C1\" && <img src={`https://mtsene.lpmiaw.univ-lr.fr/lettrelumiere/public/${syllabes[currentSyllabeIndex].file}`} \r\n                                                                      alt={syllabes[currentSyllabeIndex].value}\r\n                                                                      className=\"exercice__img\"\r\n                                                                      style={{marginBottom:'1rem'}}\r\n                                                                      onError={(e) => {\r\n                                                                        e.target.src = imgNotFound;\r\n                                                                      }}/>}\r\n                                      \r\n                                        <p className=\"list__item\">{syllabes[currentSyllabeIndex].value}</p>\r\n                                    </div> \r\n                                 : <form onSubmit={handleSubmit} className=\"exercice__form\">\r\n                                     <input type=\"text\" \r\n                                    value={input}\r\n                                    className=\"exercice__input\" \r\n                                    onKeyDown={(event) => handleKeyDown(event)}\r\n                                \r\n                                    onChange={(evt) => handleInputChange(evt)} \r\n                                    autoFocus />\r\n                                  </form>\r\n                    }\r\n                \r\n            </div>\r\n\r\n            <div className=\"exercice__footer\">\r\n                <ul className=\"progress\">\r\n                    {tabResponses.map((response, index) => (\r\n                        <li key={index} className={`${response === null ? 'progress__part' \r\n                                                            : response === true \r\n                                                            ? 'progress__part progress__part--true' \r\n                                                            : 'progress__part progress__part--false'}`}></li>\r\n                    ))}\r\n                </ul>\r\n                <button className=\"exercice__valid\" onClick={handleSubmit}>Ok <img src={checkIcon} alt=\"ok\" /></button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default C;\r\n"],"names":["props","data","onAttemptMade","score","imgNotFound","syllabes","setSyllabes","useState","choice","currentSyllabeIndex","setCurrentSyllabeIndex","input","setInput","showSyllabe","setShowSyllabe","tabResponses","setTabResponses","Array","length","fill","attemptCount","setAttemptCount","useEffect","timer","setTimeout","speak","value","clearTimeout","scorePercent","filter","el","initialInput","currentSyllabe","chosenSyllable","split","map","char","includes","join","replace","handleSubmit","event","_syllabes$currentSyll","preventDefault","isCorrect","endsWith","slice","trim","toUpperCase","newTabResponses","prevIndex","_jsxs","React","children","className","_jsx","src","speaker","alt","exo_instruction","exo_type","concat","file","style","marginBottom","onError","e","target","onSubmit","type","onKeyDown","key","indexToErase","lastIndexOf","newInput","index","handleKeyDown","onChange","evt","inputText","lastChar","firstUnderscoreIndex","indexOf","updatedInput","substring","handleInputChange","autoFocus","response","onClick","checkIcon"],"sourceRoot":""}